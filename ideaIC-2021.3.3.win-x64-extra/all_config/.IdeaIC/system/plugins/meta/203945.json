{"id":203945,"xmlId":"gudqs7.github.io.getter-setter-postfix","name":"GenerateAllSetter Postfix Completion","description":"\n\n<h2>\n    类似于 GenerateAllSetter，但由后缀触发（即类似于 .var 的用法）！\n     |\n    Similar to GenerateAllSetter, but triggered by a suffix (i.e. similar to .var usage)!\n</h2>\n\n<a href=\"https://github.com/docer-savior/getter-setter-postfix-idea-plugin\">GitHub</a> |\n<a href=\"https://github.com/docer-savior/getter-setter-postfix-idea-plugin/issues\">Issues</a> |\n<a href=\"https://github.com/docer-savior/getter-setter-postfix-idea-plugin/wiki/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B\">Get\n    Started</a> |\n<a href=\"https://github.com/docer-savior/getter-setter-postfix-idea-plugin/blob/master/LICENSE\">LICENSE</a>\n<br>\n\n\n\n<p>若图片显示不全，请<a href=\"https://github.com/docer-savior/getter-setter-postfix-idea-plugin/blob/master/README.md\">点此打开</a>到网页上查看\n</p>\n<p><a href=\"https://github.com/docer-savior/getter-setter-postfix-idea-plugin/blob/master/README_EN.md\">English 🇺🇸</a>\n</p>\n\n<h1>GenerateAllSetter Postfix Completion 是做什么的？</h1>\n<ul>\n    <li>是一个 IDEA 插件，仅支持 Java 。</li>\n    <li>参考了 GenerateAllSetter 插件，作为其补充，添加了几个 Postfix 语法，功能与 GenerateAllSetter 基本一致。</li>\n    <li>在 pojo 变量之后通过\n        <code>.allset</code> 生成所有 setter\n    </li>\n    <li>在 pojo 变量之后通过\n        <code>.allsetn</code> 生成所有设置器（但没有默认值）\n    </li>\n    <li>在 pojo 变量之后通过\n        <code>.allget</code> 生成所有 getter\n    </li>\n    <li>在使用 @lombok.Builder 的 pojo 变量之后通过\n        <code>.allbuilder</code> 生成所有 setter 调用链\n    </li>\n</ul>\n<h1>为什么这个项目有用？</h1>\n<ul>\n    <li>多一个选择，另外本人认为 Postfix 比较顺手，有助于进一步提高效率。</li>\n    <li>给大家提供一个 Postfix 插件开发模板，希望大家多开发一些提高效率的插件。</li>\n</ul>\n<h1>我该如何开始？</h1>\n<h2>1.安装插件</h2>\n<p>快点击 Install 吧!</p>\n<h2>2.打开俺提供的示例项目</h2>\n<p>示例项目地址：\n    <a href=\"https://github.com/docer-savior/docer-savior-plugin-usage-examples\">docer-savior-plugin-usage-examples</a>\n</p>\n<pre>\n或\n<code>git clone https://github.com/docer-savior/docer-savior-plugin-usage-examples</code>\n</pre>\n<p>下载后，找到\n    <code>cn.gudqs.example.genset.GenerateSetterAndGetterUsage</code> 文件\n</p>\n<h2>3.插件使用</h2>\n<p>演示所使用的基础类 </p>\n<pre>\n\t\t\t\t\t<code>\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Data\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\nclass Foo {\n\n    private Integer testInt;\n\n    private Long testLong;\n\n    private Float testFloat;\n\n    private Double testDouble;\n\n    private Boolean testBoolean;\n\n}\n</code>\n\t\t\t\t</pre>\n<h3>生成 set</h3>\n<pre>\n\t\t\t\t\t<code>public void usage01() {\n    // 用法1, 生成所有 set 方法, 带默认值, 通过 postfix\n    Foo foo = new Foo();\n    // 取消下面的注释, 光标位于 allset 后面, 按下 Tab 键\n//        foo.allset\n    // 即可得到下面结果, 且 foo.allset 会自动消失\n    foo.setTestInt(0);\n    foo.setTestLong(0L);\n    foo.setTestFloat(0f);\n    foo.setTestDouble(0D);\n    foo.setTestBoolean(false);\n}\n</code>\n\t\t\t\t</pre>\n<h3>生成 get</h3>\n<pre>\n\t\t\t\t\t<code>public void usage03() {\n    // 用法3, 生成所有 get 方法, 通过 postfix\n    Foo foo = new Foo();\n    // 取消下面的注释, 光标位于 allget 后面, 按下 Tab 键\n//        foo.allget\n    // 即可得到下面结果, 且 foo.allget 会自动消失\n    Integer testInt = foo.getTestInt();\n    Long testLong = foo.getTestLong();\n    Float testFloat = foo.getTestFloat();\n    Double testDouble = foo.getTestDouble();\n    Boolean testBoolean = foo.getTestBoolean();\n}\n</code>\n\t\t\t\t</pre>\n<h2>Lombok 的 @Builder 快速生成所有赋值方法的调用链</h2>\n<pre>\n\t\t\t\t\t<code>public void usage04() {\n    // 用法4, 生成所有 set 方法, 通过 builder, 通过 postfix\n    // 取消下面的注释, 光标位于 allbuilder 后面, 按下 Tab 键\n//        Foo.builder().allbuilder\n    // 即可得到下面结果\n    Foo foo = Foo.builder()\n            .testInt(0)\n            .testLong(0L)\n            .testFloat(0f)\n            .testDouble(0D)\n            .testBoolean(false)\n            .build();\n}\n</code>\n\t\t\t\t</pre>\n<h2>根据一段含有源对象（a）/目标对象（b）的 b.setXxx(a.getXxx())\n    方法代码生成所有 set 方法以快速实现对象转换</h2>\n<pre>\n\t\t\t\t\t<code>public void usage05() {\n    // 用法5, 将 src 的数据赋值给 dest, 常用于两个不同类直接进行 convert(需字段名称相同), 通过 postfix\n    Foo src = new Foo();\n    Foo dest = new Foo();\n    // 取消下面的注释, 光标位于 convert 后面, 按下 Tab 键\n//        dest.setTestInt(src.getTestInt());.convert\n    // 即可得到下面结果\n    dest.setTestInt(src.getTestInt());\n    dest.setTestLong(src.getTestLong());\n    dest.setTestFloat(src.getTestFloat());\n    dest.setTestDouble(src.getTestDouble());\n    dest.setTestBoolean(src.getTestBoolean());\n}\n</code>\n\t\t\t\t</pre>\n<h1>如果需要，我可以从哪里获得更多帮助？</h1>\n<h2>通过提交 Issue 来获取帮助</h2>\n<p>\n    <a href=\"https://github.com/docer-savior/getter-setter-postfix-idea-plugin/issues\">点击访问 Github Issue</a>\n</p>\n<blockquote>\n    <p>欢迎大家提问，欢迎大家一起完善它！</p>\n</blockquote>\n<p>\n    <strong>另外，我接入了 IDEA 的错误处理组件，因此当发现插件报错提示时，按照 IDEA 提示，可查看错误信息，并一键上报给我（即自动生成一个 Issue）</strong>\n</p>\n<h2>通过查看 Wiki 来获取更多说明</h2>\n<ul>\n    <li>\n        <a href=\"https://github.com/docer-savior/getter-setter-postfix-idea-plugin/wiki/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B\">入门教程</a>\n    </li>\n</ul>\n<h2>贡献指南</h2>\n<p>\n    <a href=\"https://github.com/docer-savior/getter-setter-postfix-idea-plugin/blob/master/CONTRIBUTING_CN.md\">贡献指南</a>\n</p>\n<h1>致谢名单</h1>\n<ul>\n    <li>\n        <a href=\"https://github.com/gejun123456/intellij-generateAllSetMethod\">Github intellij-generateAllSetMethod</a>\n    </li>\n    <li>\n        <a href=\"https://github.com/yoke233/genSets\">Github genSets</a>\n    </li>\n</ul>\n\n<h2>Getting started</h2>\n<ul>\n\t<li>\n\t\t<a href=\"https://github.com/docer-savior/getter-setter-postfix-idea-plugin/wiki/%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B\">入门教程</a>\n\t</li>\n\t<li>\n\t\t<a href=\"https://github.com/docer-savior/getter-setter-postfix-idea-plugin/wiki/Getting-Started\">Getting Started Tutorial</a>\n\t</li>\n</ul>\n","organization":"心累","tags":["Completion"],"vendor":"心累","version":"1.2.0","notes":"\n\n<pre>\n<strong>Release v1.2.0</strong>\n    1.feat: Generate Convert 添加仅通过目标对象生成完整语句, 生成后, 源对象由用户手动输入(仅需输入一次即替换全部语句).\n    2.feat: getter/setter 生成添加不含父类的模式, 使用 allsetp / allgetp 来触发; 仅支持 postfix completion.\n\n    English：\n    1.feat: Generate Convert adds a complete statement generated only through the target object, after generation, the source object is manually input by the user (only need to input once to replace all statements).\n    2.feat: gettersetter generates a mode without parent class, use allsetp allgetp to trigger; only supports postfix completion.\n<strong>Release v1.1.6</strong>\n    1.feat: Generate Convert 添加判空\n\n    English：\n    1.feat: Generate Convert Add empty judgment\n<strong>Release v1.1.5</strong>\n    1:fix:  修复在方法上使用 Generate Convert 时, 内部类作为返回值时, 实例化对象语句缺失前缀导致的语法错误\n\n    English：\n    1:fix: fix syntax error caused by missing prefix of instantiated object statement when using Generate Convert on method with inner class as return value\n<strong>Release v1.1.3</strong>\n    1:fix: 修复后缀 .allbuilder 处理不当导致的 NPE 异常\n\n    English：\n    1:fix: Fix the NPE exception caused by improper handling of the suffix .allbuilder\n<strong>Release v1.1.2</strong>\n    1:fix issue #13(通知模块ID不匹配导致的NPE)\n\n    English：\n    1: fix issue 13 (notify NPE caused by module ID mismatch)\n<strong>Release v1.1.1</strong>\n    1:fix issue #7(本地新增的postfix超级加倍问题......)\n\n    English：\n    1: fix issue #7 (locally added postfix super doubling problem...)\n<strong>Release v1.1.0</strong>\n    1:feat: 新增生成 setter 调用链, 见 @Accessors(chain = true) #5\n\n    English：\n    1:feat: Added a call chain for generating setters, see @Accessors(chain = true)\n<strong>Release v1.0.3</strong>\n    1:fix: 修复 Generate Convert 在方法上作用时, 生成的代码不带换行问题.\n\n    English：\n    1:fix: Fix the problem that when Generate Convert works on the method, the generated code does not have line breaks.\n<strong>Release v1.0.0</strong>\n    1. init\n</pre>","dependencies":["com.intellij.modules.lang","com.intellij.modules.java"],"since":"211.6693.111","until":"IU-222.4167.29","size":6336009,"sourceCodeUrl":"https://github.com/docer-savior/getter-setter-postfix-idea-plugin"}